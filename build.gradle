plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.palantir.docker" version "0.26.0"
    id 'java'
    id 'jacoco'
}

ext {
    appVersion = '1.0.1'
    validatorVersion = '1.7'
    contextVersion = '4.3.10.RELEASE'
    openapiVersion = '1.5.2'
    jaxbVersion = '2.3.0'
    reactorBomTestVersion = '2020.0.2'
    blockhoundTestVersion = '1.0.4.RELEASE'
    jodahTestVersion = '0.4.0'
    mockserverTestVersion = '5.11.2'
}

group = 'rhribeiro25'
version = "${appVersion}"
sourceCompatibility = '11'

bootJar {
    baseName = 'base-project-spring-webflux'
    version = "${appVersion}"
}

configurations {
    compileOnly { extendsFrom annotationProcessor }
    all { exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' }
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    // Spring projects
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-devtools'
    // PostgreSQL Connector
    runtimeOnly 'io.r2dbc:r2dbc-postgresql'
    // Apache Commons Validator
    implementation "commons-validator:commons-validator:${validatorVersion}"
    // Context
    implementation 'org.springframework:spring-context'
    implementation "org.springframework:spring-context-support:${contextVersion}"
    // Reactor project
    implementation 'io.projectreactor:reactor-tools'
    implementation 'io.projectreactor:reactor-core'
    // Openapi
    implementation "org.springdoc:springdoc-openapi-webflux-ui:${openapiVersion}"
    // Lombok project
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    // JAXB API
    implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"
    // Test dependencies
    implementation platform("io.projectreactor:reactor-bom:${reactorBomTestVersion}")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation "io.projectreactor.tools:blockhound:${blockhoundTestVersion}"
    testImplementation "net.jodah:concurrentunit:${jodahTestVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mock-server:mockserver-netty:${mockserverTestVersion}"
    testImplementation "org.mock-server:mockserver-spring-test-listener:${mockserverTestVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

// Test
check.dependsOn jacocoTestCoverageVerification

jacoco {
    toolVersion = '0.8.6'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            element = 'CLASS'
            excludes = ['br.com.rhribeiro25.baseprojectspringwebflux.core.dtos.*',
                        'br.com.rhribeiro25.baseprojectspringwebflux.dataprovider.apis.viacep.dtos.*']
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['br/com/rhribeiro25/baseprojectspringwebflux/core/dtos/*',
                                        'br/com/rhribeiro25/baseprojectspringwebflux/dataprovider/apis/viacep/dtos/*'])
        }))
    }
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'junit-vintage'
    }
    finalizedBy jacocoTestReport
}

// Docker
task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${project.group}/${bootJar.baseName}"
    tags "${bootJar.version}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
